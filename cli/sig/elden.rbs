module Elden
end

module Elden
  module About
    def logo: () -> ::String
  end
end

module Elden
  class CLI < Thor
    extend Elden::CLIAttributes

    def dev: () -> untyped

    def update: () -> untyped

    def sync: () -> untyped

    private

    def elden_shell: () -> untyped
  end
end

module Elden
  module CLIAttributes
    def dev_description: () -> untyped

    def update_description: () -> untyped

    def sync_description: () -> untyped

    def kitty_title_option: () -> untyped

    def sync_packer_option: () -> untyped

    def update_treesitter_option: () -> untyped

    def purge_vim_config_directory_option: () -> untyped

    def launch_dev_option: () -> untyped

    private

    def boolean_option: (untyped name, aliases: untyped, desc: untyped) -> untyped
  end
end

module Elden
  module EldenDirectory
    include Elden::Paths

    def elden_directory_sync!: (?verbose: bool) -> untyped
  end
end

module Elden
  module Kitty
    include Elden::ShellCommand

    def close_last: () -> untyped

    private

    def launch: (untyped type, ?title: untyped?, ?argument: ::String, ?focus: bool) -> (nil | untyped)

    def close: (untyped title) -> (nil | untyped)

    def kitty_command: (untyped arguments) -> untyped

    def default_title: () -> ::String

    def window_exists?: (untyped title) -> untyped
  end
end

module Elden
  module Paths
    def self.path: (untyped path, *untyped paths) -> untyped

    def self.env_path: (untyped env_name, *untyped paths, ?default: untyped?) -> untyped

    def self.exist?: (untyped path) -> { exists: untyped, path: untyped }
  end
end

module Elden
  class Shell
    include Elden::EldenDirectory

    include Elden::Kitty

    include Elden::Paths

    include Elden::ShellCommand

    include Elden::VimConfigDirectory

    include Elden::WithVim

    def initialize: () -> void

    def launch_dev!: (?kitty_title: untyped?, ?sync_packer: bool, ?update_treesitter: bool) -> untyped

    def update_plugins: (?sync_packer: bool, ?update_treesitter: bool) -> untyped

    def sync!: (?purge_vim_config_directory: bool, ?sync_packer: bool, ?update_treesitter: bool, ?launch_dev: bool) -> untyped

    private

    attr_reader windows: untyped
  end
end

module Elden
  module ShellCommand
    def self.included: (untyped base) -> (nil | untyped)

    def shell_command: () -> untyped

    private

    def disable_shell_command: () -> untyped
  end
end

module Elden
  VERSION: "0.1.0"
end

module Elden
  class Vim
    include Elden::ShellCommand

    attr_reader arguments: untyped

    def initialize: () -> void

    def use_config: (untyped path) -> untyped

    def treesitter_update: () -> untyped

    private

    def add_vim_command: (untyped vim_command) -> untyped

    def add_argument: (untyped prefix, untyped argument) -> untyped
  end
end

module Elden
  module VimConfigDirectory
    include Elden::Paths

    def vim_config_directory_backup!: (untyped backup_location) -> nil

    def vim_config_directory_purge!: (?verbose: bool) -> (untyped | nil)
  end
end

module Elden
  module WithVim
    def with_vim: (?untyped? opts) -> untyped
  end
end
